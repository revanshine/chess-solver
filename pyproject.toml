[project]
name = "codex-template"
version = "0.1.0"
description = "A modern Python 3.13 template for Codex AI development with TDD and UV"
readme = "README.md"
requires-python = ">=3.13"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    # Core dependencies for modern Python services
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",

    # HTTP client
    "httpx>=0.28.1",

    # Async utilities
    "asyncio-mqtt>=0.16.2",
    "aiofiles>=24.1.0",

    # Database and caching
    "redis>=5.2.0",
    "asyncpg>=0.30.0",
    "sqlalchemy[asyncio]>=2.0.36",

    # Logging and monitoring
    "structlog>=24.4.0",
    "rich>=13.9.4",

    # Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",

    # Configuration
    "python-dotenv>=1.0.1",

    # Data processing
    "pandas>=2.2.3",
    "numpy>=2.1.3",

    # Job queue
    "celery[redis]>=5.4.0",
]

[dependency-groups]
dev = [
    # Testing framework
    "pytest>=8.3.4",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "pytest-watch>=4.2.0",

    # Code quality
    "black>=24.10.0",
    "isort>=5.13.2",
    "ruff>=0.8.4",
    "mypy>=1.13.0",

    # Development tools
    "pre-commit>=4.0.1",
    "bandit>=1.7.10",

    # Documentation
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.44",
    "mkdocstrings[python]>=0.27.2",

    # Jupyter for data analysis
    "jupyter>=1.1.1",
    "ipykernel>=6.29.5",

    # Profiling and debugging
    "line-profiler>=4.1.3",
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
]

test = [
    "pytest>=8.3.4",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
]

docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.44",
    "mkdocstrings[python]>=0.27.2",
]

[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[project.scripts]
codex-template = "codex_template.main:main"

[project.urls]
Homepage = "https://github.com/yourusername/codex-template"
Repository = "https://github.com/yourusername/codex-template"
Documentation = "https://yourusername.github.io/codex-template"
Issues = "https://github.com/yourusername/codex-template/issues"

# Tool configurations
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "async: Async tests",
    "error_handling: Error handling tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["codex_template"]

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # flake8-eradicate
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["ARG", "S101"]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "redis.*",
    "celery.*",
    "asyncpg.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.coverage.html]
directory = "htmlcov"
